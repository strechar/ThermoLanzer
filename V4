#include <OneWire.h> // protocolo de comunicação do sensor
#include <DallasTemperature.h> // biblioteca para leitura do sensor
#include <EEPROM.h> // descomentar se precisar gravar a eeprom

#include <SPI.h>



#define ONE_WIRE_BUS 2 //define o pino D2 para entrada do sensor
OneWire oneWire(ONE_WIRE_BUS); // definições relativas a comunicação com sensor
DallasTemperature sensors(&oneWire); // variável que receberá as temperaturas
#define TEMPERATURE_PRECISION 8 //resolução do sensor 0,5°C

int param_delta = 0; // endereço na eeprom para este parâmetro
int param_max_caixa = 1; // endereço na eeprom para este parâmetro
int param_min_placa = 2; // endereço na eeprom para este parâmetro
int param_fator = 3; // endereço na eeprom para este parâmetro

int bomba = 10; // acionamento da bomba será pelo pino 10
int dif = 0; // armazena o resultado da diferença de temperatura
int status = 0; // variável que indica o status da bomba - 0 ou 1

byte incomingByte;

void setup()   {



  sensors.begin(); // inicializa os sensores
  Serial.begin(9600);
  pinMode(bomba, OUTPUT); // define o pino D7 "bomba" como saída digital

  // EEPROM.write(param_delta, 8); // descomentar para gravar os valores na eeprom
  // EEPROM.write(param_max_caixa, 40); // descomentar para gravar os valores na eeprom
  // EEPROM.write(param_min_placa, 6); // descomentar para gravar os valores na eeprom
  // EEPROM.write(param_fator, 2); // descomentar para gravar os valores na eeprom
  // para gravar a eeprom: descomente as linhas, altere os números, carregue o programa e
  // rode uma vez. depois, comente as linhas e carregue novamente.
}

void loop(void)      {


  int max_caixa = EEPROM.read(param_max_caixa); // leitura da eeprom e armazenamento da variável
  int delta = EEPROM.read(param_delta); // leitura da eeprom e armazenamento da variável
  int min_placa = EEPROM.read(param_min_placa); // leitura da eeprom e armazenamento da variável
  int fator = EEPROM.read(param_fator); // leitura da eeprom e armazenamento da variável

  sensors.requestTemperatures(); // aquisição das temperaturas, valor em float

  int temp_caixa = (sensors.getTempCByIndex(1)); // valor do sensor da caixa convertido para inteiro
  int temp_placa = (sensors.getTempCByIndex(0)); // valor do sensor da placa convertido para inteiro
  int dif = (temp_placa - temp_caixa);

  
  // início da lógica de controle

  if ((((temp_caixa < max_caixa) && (dif >= delta)) || (temp_placa <= min_placa)))

  {
  digitalWrite(bomba, HIGH); // liga a bomba
  
  Serial.println ("on"); 
  }
  if ((((dif <= fator) && (temp_placa >= temp_caixa)) || (temp_caixa >= max_caixa) || ((temp_placa >= (min_placa + fator)) && (temp_placa < temp_caixa))))

  {
  digitalWrite(bomba, LOW);  // desliga a bomba
  
  Serial.println ("off"); 
  }

  // final da lógica de controle

  delay (1000);
  Serial.println (temp_caixa + 300);
  delay (1000);
  Serial.println (temp_placa + 600);
  delay (1000);
  Serial.println (dif + 900);
  delay (1000);
  Serial.println (delta + 1200);  
  delay (1000);
  Serial.println (fator + 1500);
  delay (1000); 
   
   

  

} // fim do programa
